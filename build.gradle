import org.hidetake.gradle.swagger.generator.GenerateSwaggerUI
import org.springframework.boot.gradle.tasks.bundling.BootJar

plugins {
    id 'java'
    id 'org.springframework.boot' version '2.7.8'
    id 'io.spring.dependency-management' version '1.0.15.RELEASE'
    id 'org.asciidoctor.jvm.convert' version '3.3.2'
    id 'org.hidetake.swagger.generator' version '2.18.2'
    id 'com.epages.restdocs-api-spec' version '0.16.2'
    id "co.uzzu.dotenv.gradle" version "2.0.0"
}

group = 'com.prgrms'
version = '1.0.0'
sourceCompatibility = '17'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

ext {
    set('snippetsDir', file("build/generated-snippets"))
}

swaggerSources {
    sample {
        setInputFile(file("${project.buildDir}/api-spec/openapi3.yaml"))
    }
}

openapi3 {
    setServer(env.MY_SERVER.orElse("http://localhost:8080")) // Swagger 서버 설정
    title = "KKINI API Document"
    description = "Spring REST Docs with SwaggerUI."
    version = "1.0.0"
    format = "yaml"
}

dependencies {
    // Spring Boot Starter
    // WEB
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    // Security
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
    testImplementation 'org.springframework.security:spring-security-test'
    // DB
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    // Test & Config
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'

    // Flyway
    implementation 'org.flywaydb:flyway-core'
    implementation 'org.flywaydb:flyway-mysql'
    // Lombok
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    annotationProcessor "org.projectlombok:lombok-mapstruct-binding:0.2.0" // lombok 에서 mapstruct binding 해주는 기능
    //MySQL Driver
    runtimeOnly 'com.mysql:mysql-connector-j'
    //H2 Driver
    runtimeOnly 'com.h2database:h2'
    // RestDocs API SPEC
    testImplementation 'com.epages:restdocs-api-spec-mockmvc:0.16.2'
    // Swagger UI
    swaggerUI 'org.webjars:swagger-ui:4.11.1'
    // JWT
    implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
    implementation 'io.jsonwebtoken:jjwt-impl:0.11.5'
    implementation 'io.jsonwebtoken:jjwt-jackson:0.11.5'
    // MapStruct
    implementation 'org.mapstruct:mapstruct:1.5.3.Final'
    annotationProcessor 'org.mapstruct:mapstruct-processor:1.5.3.Final'
    // P6spy
    implementation 'com.github.gavlyukovskiy:p6spy-spring-boot-starter:1.8.1'

    // https://mvnrepository.com/artifact/org.hibernate/hibernate-spatial
    implementation 'org.hibernate:hibernate-spatial'
    //https://mvnrepository.com/artifact/org.locationtech.jts/jts-core
    implementation 'org.locationtech.jts:jts-core:1.19.0'
    //logback - cloudwatch
    implementation group: 'ca.pjer', name: 'logback-awslogs-appender', version: '1.6.0'
    // AWS
    implementation 'org.springframework.cloud:spring-cloud-starter-aws:2.2.6.RELEASE'

    //Slack appender
    implementation 'com.github.maricn:logback-slack-appender:1.4.0'
}


tasks.named('test') {
    outputs.dir snippetsDir
    useJUnitPlatform()
}

tasks.named('asciidoctor') {
    inputs.dir snippetsDir
    dependsOn test
}

asciidoctor.doFirst {
    delete file('src/main/resources/static/docs')
}

tasks.withType(GenerateSwaggerUI).configureEach {
    dependsOn 'openapi3'
}

tasks.register('copySwaggerUI', Copy) {
    dependsOn 'generateSwaggerUISample'
    dependsOn "jar"
    dependsOn "bootJarMainClassName"

    def generateSwaggerUISampleTask = tasks.named('generateSwaggerUISample', GenerateSwaggerUI).get()

    from("${generateSwaggerUISampleTask.outputDir}")
    into("${project.buildDir}/resources/main/static/docs/")
}

task copyDocument(type: Copy) {
    dependsOn asciidoctor
    from file("build/docs/asciidoc")
    into file("src/main/resources/static/docs")
}

tasks.withType(BootJar).configureEach {
    dependsOn 'copySwaggerUI'
}
