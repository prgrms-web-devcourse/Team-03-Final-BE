name: CD - Deploy to AWS by docker

on:
  push:
    branches:
      - develop

# 권한 설정
permissions:
  contents: read

jobs:
  CI-CD:
    runs-on: ubuntu-latest

    steps:
      # JDK 설정
      - uses: actions/checkout@v3
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      # 환경 변수 설정
      - name: Set up Environment
        run: echo "${{ secrets.ENV_PROPERTIES }}" > ./.env # GitHub SecretKey 에서 설정한 내용으로 .env 파일 생성
      
      # 도커 MYSQL 이미지 실행
      - name: Create Mysql Docker Container
        run: sudo docker run -d -p 3305:3306 --env MYSQL_DATABASE="${{ secrets.TEST_DATABASE }}" --env MYSQL_ROOT_PASSWORD="${{ secrets.TEST_DATASOURCE_PASSWORD }}" mysql:8.0.31

      # 빌드
      - name: Build with Gradle
        run: ./gradlew clean bootJar

      #빌드 후 도커 허브로 push
      - name: Docker Build & Push to Hub
        run: |
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
          docker build -t ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPO }} .
          docker push ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPO }}

      - name: Send to Environment
        uses: appleboy/scp-action@master
        with:
          username: ec2-user
          host: ${{ secrets.EC2_HOST }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          source: "./.env"
          target: "/home/ec2-user"

      - name: Send to Docker-Compose
        uses: appleboy/scp-action@master
        with:
          username: ec2-user
          host: ${{ secrets.EC2_HOST }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          port: 22
          source: "./docker-compose.yml"
          target: "/home/ec2-user/"

      - name: Deploy to Dev
        uses: appleboy/ssh-action@master
        with:
          username: ec2-user
          host: ${{ secrets.EC2_HOST }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          script: |
            sudo docker rm -f $(docker ps -qa)
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPO }}
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_NGINX_REPO }}
            docker-compose up -d
            docker image prune -f